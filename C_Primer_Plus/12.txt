1.
#include<stdio.h>
int critic(void);
int main(void)
{
	int units = 0;
	printf("How many pounds to a firkin of butter?\n");
	scanf("%d", &units);
	while (units != 56)
		units = critic();
	printf("You must have looked it up!\n");
	return 0;
}
int critic(void)
{
	int units;
	printf("No luck,chummy.Try again.\n");
	scanf("%d", &units);
	return units;
}
7.
#include<stdio.h>
#include<stdlib.h>
#include<time.h>
int roll_n_dice(int dice, int sides);
int roll_count;
int main(void)
{
}
int roll_n_dice(int dice, int sides)
{
	int d;
	int total = 0;
	if (sides < 2)
	{
		printf("Need at least 2 sides.\n");
		return -2;
	}
	if (dice < 1)
	{
		printf("Need at least 1 dice.\n");
		return -1;
	}
	for (d = 0;d < dice;d++)
		total += rollem(sides);

}
2.
pe12-2a.h


#pragma once
#define METRIC 0
#define US 1
void set_mode(int);
void get_info(void);
void show_info(void);
pe12-2a.cpp

#include<stdio.h>
#include "pe12-2a.h"
static int present_mode = US;
static double distant;
static double fuel;
void set_mode(int mode)
{
	if (mode == METRIC || mode == US)
		present_mode = mode;
	else
	{
		present_mode = mode < -1 ? METRIC : US;
		printf("Invalid mode specified. Mode %s used.\n", mode<-1 ? "0 (METRIC)" : "1 (US)");
	}
}
void get_info()
{
	if (present_mode == METRIC)
	{
		printf("Enter distance travled in kilometers:");
		scanf("%lf", &distant);
		printf("Enter fuelconsumed in liters:");
		scanf("%lf", &fuel);
	}
	else
	{
		printf("Enter distance travled in miles:");
		scanf("%lf", &distant);
		printf("Enter fuelconsumed in gallon:");
		scanf("%lf", &fuel);
	}
}
void show_info(void)
{
	if (present_mode == METRIC)
	printf("Fuel consumption is %.2f liters per 100km\n", 100 * (distant / fuel));
	else
		printf("Fuel consumption is %.1f miles per gallon\n",  (distant / fuel));
}
pe12-2b.cpp

#include<stdio.h>
#include "pe12-2a.h"
int main(void)
{
	int mode;
	printf("Enter 0 for metric mode,1 for US mode: ");
	while (scanf("%d", &mode) == 1 && mode != -1)
	{
		set_mode(mode);
		get_info();
		show_info();
		printf("Enter 0 for metric mode,1 for US mode");
		printf("(-1 to quit):");
	}
	printf("Done.\n");
	return 0;
}
3.
pe12-2a.h

#pragma once
#define METRIC 0
#define US 1
void set_mode(int mode,int *present_mode);
void get_info(int mode, int *present_mode,double *distant,double * fuel);
void show_info(int present_mode, double distant, double fuel);
pe12-2a.cpp

#include<stdio.h>
#include "pe12-2a.h"
void set_mode(int mode, int *present_mode)
{
	if (mode == METRIC || mode == US)
		*present_mode = mode;
	else
	{
		*present_mode = mode < -1 ? METRIC : US;
		printf("Invalid mode specified. Mode %s used.\n", mode<-1 ? "0 (METRIC)" : "1 (US)");
	}
}
void get_info(int mode, int *present_mode, double *distant, double * fuel)
{
	if (*present_mode == METRIC)
	{
		printf("Enter distance travled in kilometers:");
		scanf("%lf", distant);
		printf("Enter fuelconsumed in liters:");
		scanf("%lf", fuel);
	}
	else
	{
		printf("Enter distance travled in miles:");
		scanf("%lf", distant);
		printf("Enter fuelconsumed in gallon:");
		scanf("%lf", fuel);
	}
}
void show_info(int present_mode, double distant, double fuel)
{
	if (present_mode == METRIC)
	printf("Fuel consumption is %.2f liters per 100km\n", 100 * (distant / fuel));
	else
		printf("Fuel consumption is %.1f miles per gallon\n",  (distant / fuel));
}

pe12-2b.cpp

#include<stdio.h>
#include "pe12-2a.h"
int main(void)
{
	int mode, present_mode = US;
	double distant, fuel;
	printf("Enter 0 for metric mode,1 for US mode: ");
	while (scanf("%d", &mode) == 1 && mode != -1)
	{
		set_mode(mode, &present_mode);
		get_info(mode, &present_mode, &distant,&fuel);
		show_info(present_mode, distant, fuel);
		printf("Enter 0 for metric mode,1 for US mode");
		printf("(-1 to quit):");
	}
	printf("Done.\n");
	return 0;
}
4.
#include<stdio.h>
int count;
int Fibonacci(int n);
int main(void)
{
	int n;
	puts("Input the max term of Fibonacci:(q to quit)");
	while (scanf("%d", &n) == 1)
	{
		count=0;
		Fibonacci(n);
		printf("the function of Fibonacci hascalled %d times\n", count);
		puts("Input the max term of Fibonacci:");
	}
	puts("Quit.");
	return 0;
}
int Fibonacci(int n)
{
	count++;
	if (n > 2)
		return Fibonacci(n - 2) + Fibonacci(n - 1);
	else
		return 1;
}
5.
#include<stdio.h>
#include<stdlib.h>
#define WIDTH 100
int main(void)
{
	int random[WIDTH],n,i,j,temp;
	for (n = 0;n < 100;n++)
	{
		random[n] = rand() % 10 + 1;
		if (n % 10 == 0)
			printf("\n");
		printf("%d\t", random[n]);
	}
	printf("\nAfter sort");
	for (i = 0;i < n - 1;i++)
		for (j = i + 1;j < n;j++)
		if (random[i]>random[j])
		{
			temp = random[i];
			random[i] = random[j];
			random[j] = temp;
		}
	for (n = 0;n < 100;n++)
	{
		if (n % 10 == 0)
			printf("\n");
		printf("%d\t", random[n]);
	}
	return 0;
}
6.
#include<stdio.h>
#include<stdlib.h>
int main(void)
{
	int random[1000], n, m, h, num[10] = { 0 };
	for (n = 0;n < 10;n++)
	{
		srand(n);
		for (m = 0;m < 1000;m++)
		{
			random[m] = rand() % 10 + 1;
			for (h = 0;h < 10;h++)
				if (random[m]-1 == h)
				num[h] += 1;
		}
		printf("The %d time:\n", n+1);
		for (h = 0;h < 10;h++)
			printf("num %d count %d times totally\n", h+1, num[h]);
	}
	return 0;
}
7.
#include<stdio.h>
#include<stdlib.h>
#include<time.h>
int roll_n_dice(int dice, int sides);
int rollem(int sides);
int roll_count = 0;
int main(void)
{
	int dice, sets,sides, m;
	srand((unsigned int)time(0));
	printf("Enter the number of sets,enter q to stop.\n");
	while ((scanf("%d", &sets) == 1) && sets > 0)
	{
		printf("How many sides and how many dice?\n");
		scanf("%d""%d", &sides, &dice);
		printf("Here are %d sets of %d %d-sided throws.\n", sets, dice, sides);
		for (m = 1;m <= sets;m++)
		{
			printf("%d\t", roll_n_dice(dice, sides));
			if (m % dice == 0)
				printf("\n");
		}
		printf("How many sets,enter q to stop.\n");
	}
	return 0;
}

int rollem(int sides)
{
	int roll;
	roll = rand() % sides + 1;
	++roll_count;
	return roll;
}
int roll_n_dice(int dice, int sides)
{
	int d;
	int total = 0;
	if (sides < 2)
	{
		printf("Need at least 2 sides.\n");
		return -2;
	}
	if (dice < 1)
	{
		printf("Need at least 1 die.\n");
		return -1;
	}
	for (d = 0;d < dice;d++)
		total += rollem(sides);
	return total;
}
8.
#include<stdio.h>
#include<stdlib.h>
int *make_array(int elem, int val);
void show_array(const int ar[], int n);
int main(void)
{
	int *pa, size, value;
	printf("Enter the number of elements: ");
	scanf("%d", &size);
	while (size > 0)
	{
		printf("Enter the initialization value ");
		scanf("%d", &value);
		pa = make_array(size, value);
		if (pa)
		{
			show_array(pa, size);
			free(pa);
		}
		printf("Enter the number of elements(<1 to quit): ");
		scanf("%d", &size);
	}
	printf("Done.\n");
	return 0;
}
int *make_array(int elem, int val)
{
	int *ptd, n;
	ptd = (int *)malloc(elem*sizeof(int));
	for (n = 0; n < elem;n++)
		ptd[n] = val;
	return ptd;
}
void show_array(const int ar[], int n)
{
	int m;
	for (m = 0;m < n;m++)
	{
		printf("%d\t", ar[m]);
		if ((m + 1) % 8 == 0)
			putchar('\n');
	}
}
12.
#include<stdio.h>
#include<stdlib.h>
#include<time.h>
int main(void)
{
	int array[20][31], i, j;
	char a[11] = { ' ','.','#','$','%','^','&','*','!','@' };
	srand((unsigned int)time(0));
	for (i = 0;i < 20;i++)
		for (j = 0;j < 30;j++)
		array[i][j] = rand() % 10;
	for (i = 0;i < 20;i++)
		for (j = 0;j < 30;j++)
		{
			fprintf(stdout, "%d ", array[i][j]);
			if ((j + 1) % 30 == 0)
				putchar('\n');
		}
	for (i = 0;i < 20;i++)
		for (j = 0;j < 30;j++)
		{
			switch (array[i][j])
			{
			case 0:array[i][j] = a[0];
			case 1:array[i][j] = a[1];
			case 2:array[i][j] = a[2];
			case 3:array[i][j] = a[3];
			case 4:array[i][j] = a[4];
			case 5:array[i][j] = a[5];
			case 6:array[i][j] = a[6];
			case 7:array[i][j] = a[7];
			case 8:array[i][j] = a[8];
			case 9:array[i][j] = a[9];
			default:break;
			}
		}
	for (i = 0;i < 20;i++)
		for (j = 0;j < 30;j++)
		{
			fprintf(stdout, "%c ", array[i][j]);
			if ((j + 1) % 30 == 0)
				putchar('\n');
		}
	return 0;
}